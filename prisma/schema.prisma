generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model business {
  id                   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description          String?     @db.VarChar(255)
  sales_data           Int?
  average_order_amount Int?
  total_orders         Int?
  name                 String      @db.VarChar(255)
  created_at           DateTime    @default(now()) @db.Timestamp(6)
  updated_at           DateTime    @default(now()) @db.Timestamp(6)
  user_id              String      @db.Uuid
  tenant_id            String      @db.VarChar(255)
  user                 user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer             customer[]
  dashboard            dashboard[]
  order                order[]
  product              product[]
}

model customer {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_id      String   @db.Uuid
  customer_name    String?  @db.VarChar(255)
  customer_email   String?  @db.VarChar(255)
  customer_phone   String?  @db.VarChar(255)
  customer_address String?  @db.VarChar(255)
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  business         business @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model dashboard {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_id          String   @db.Uuid
  current_day_sales    Int?
  week_to_date_sales   Int?
  average_order_amount Int?
  total_orders         Int?
  created_at           DateTime @default(now()) @db.Timestamp(6)
  updated_at           DateTime @default(now()) @db.Timestamp(6)
  business             business @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model order {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_id  String   @db.Uuid
  order_amount Int?
  order_date   DateTime @db.Date
  order_status String?  @db.VarChar(255)
  order_number String?  @db.VarChar(255)
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  business     business @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model product {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_id         String   @db.Uuid
  product_name        String?  @db.VarChar(255)
  product_price       Int?
  product_description String?  @db.VarChar(255)
  product_stock       Int?
  created_at          DateTime @default(now()) @db.Timestamp(6)
  updated_at          DateTime @default(now()) @db.Timestamp(6)
  business            business @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  business    business[]
}
